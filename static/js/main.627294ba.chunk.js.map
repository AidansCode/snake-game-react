{"version":3,"sources":["utilities/Constants.js","utilities/LinkedList.js","utilities/Utilities.js","components/GameBoard.jsx","components/PlayGameButton.jsx","components/DisplayMessage.jsx","App.js","utilities/UseInterval.js","index.js"],"names":["LinkedList","value","this","head","tail","addToFront","node","Node","next","prev","Utilities","doesSnakeBodyContainPosition","snakeBody","position","curNode","isValidPosition","row","col","size","Constants","getNextPosition","direction","newPosition","copySnake","snake","newSnake","addToBack","moveSnake","setSnake","applePosition","setApplePosition","endGame","didSnakeRunIntoSelf","isAppleAtPosition","generateNewApple","dropFromBack","getDirectionFromKey","key","areDirectionsOppositeFromEachOther","dir1","dir2","getRandomIntInRange","min","max","Math","floor","random","getRandomBoardPosition","boardSize","getNewApplePosition","GameBoard","getCellClass","classes","className","Array","map","e","rowId","colId","PlayGameButton","isGameActive","startGame","style","marginBottom","onClick","DisplayMessage","text","color","App","useState","setIsGameActive","score","setScore","setSnakeBody","snakeDirection","setSnakeDirection","message","setMessage","useEffect","window","addEventListener","restartGame","newDirection","oldDirection","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","oldScore","textAlign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.627294ba.chunk.js","sourcesContent":["export default {\r\n  GAME_BOARD_SIZE: 20,\r\n  SPAWN_POSITION: [7, 4],\r\n  REFRESH_RATE: 130,\r\n\r\n  DIRECTION_UP: 1,\r\n  DIRECTION_RIGHT: 2,\r\n  DIRECTION_DOWN: 3,\r\n  DIRECTION_LEFT: 4\r\n};\r\n","class LinkedList {\r\n  constructor(value = null) {\r\n    this.head = null;\r\n    this.tail = null;\r\n\r\n    if (value) {\r\n      this.addToFront(value);\r\n    }\r\n  }\r\n\r\n  addToFront(value) {\r\n    let node = new Node(value);\r\n    node.next = this.head;\r\n\r\n    if (this.head) {\r\n      this.head.prev = node;\r\n    } else {\r\n      this.tail = node;\r\n    }\r\n    this.head = node;\r\n  }\r\n\r\n  addToBack(value) {\r\n    let node = new Node(value);\r\n    if (this.head) {\r\n      this.tail.next = node;\r\n      node.prev = this.tail;\r\n    } else {\r\n      this.head = node;\r\n    }\r\n    this.tail = node;\r\n  }\r\n\r\n  dropFromBack() {\r\n    if (this.tail) {\r\n      this.tail = this.tail.prev;\r\n      if (this.tail) {\r\n        this.tail.next = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass Node {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.next = null;\r\n    this.prev = null;\r\n  }\r\n}\r\n\r\nexport default LinkedList;\r\n","import Constants from './Constants';\r\nimport LinkedList from './LinkedList';\r\n\r\nconst Utilities = {\r\n  doesSnakeBodyContainPosition: (snakeBody, position) => {\r\n    let curNode = snakeBody.head;\r\n\r\n    while (curNode) {\r\n      let value = curNode.value;\r\n      if (value[0] === position[0] && value[1] === position[1]) {\r\n        return true;\r\n      } else {\r\n        curNode = curNode.next;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n  isValidPosition: (row, col) => {\r\n    let size = Constants.GAME_BOARD_SIZE - 1; //because 0 indexing\r\n    return (\r\n      col >= 0 && col <= size\r\n      &&\r\n      row >= 0 && row <= size\r\n    );\r\n  },\r\n  getNextPosition: (position, direction) => {\r\n    let newPosition = [...position];\r\n    if (direction === Constants.DIRECTION_UP) {\r\n      newPosition[0]--;\r\n    } else if (direction === Constants.DIRECTION_DOWN) {\r\n      newPosition[0]++;\r\n    } else if (direction === Constants.DIRECTION_LEFT) {\r\n      newPosition[1]--;\r\n    } else if (direction === Constants.DIRECTION_RIGHT) {\r\n      newPosition[1]++;\r\n    }\r\n\r\n    return newPosition;\r\n  },\r\n  copySnake: (snake) => {\r\n    let newSnake = new LinkedList();\r\n\r\n    let node = snake.head;\r\n    while (node) {\r\n      newSnake.addToBack(node.value);\r\n      node = node.next;\r\n    }\r\n\r\n    return newSnake;\r\n  },\r\n  moveSnake: (setSnake, direction, applePosition, setApplePosition, endGame) => {\r\n    setSnake((snake) => {\r\n      let newSnake = Utilities.copySnake(snake);\r\n\r\n      let newPosition = Utilities.getNextPosition(newSnake.head.value, direction);\r\n      const isValidPosition = Utilities.isValidPosition(newPosition[0], newPosition[1]);\r\n      const didSnakeRunIntoSelf = Utilities.doesSnakeBodyContainPosition(newSnake, newPosition);\r\n      if (!isValidPosition || didSnakeRunIntoSelf) {\r\n        endGame();\r\n        return newSnake;\r\n      }\r\n\r\n      newSnake.addToFront(newPosition);\r\n      if (Utilities.isAppleAtPosition(newPosition, applePosition)) {\r\n        Utilities.generateNewApple(newSnake, setApplePosition);\r\n      } else {\r\n        newSnake.dropFromBack();\r\n      }\r\n\r\n      return newSnake;\r\n    });\r\n  },\r\n  getDirectionFromKey: (key) => {\r\n    const map = {\r\n      'ArrowLeft': Constants.DIRECTION_LEFT,\r\n      'ArrowUp': Constants.DIRECTION_UP,\r\n      'ArrowRight': Constants.DIRECTION_RIGHT,\r\n      'ArrowDown': Constants.DIRECTION_DOWN\r\n    };\r\n\r\n    return map[key] || null;\r\n  },\r\n  areDirectionsOppositeFromEachOther: (dir1, dir2) => {\r\n    const map = {\r\n      [Constants.DIRECTION_LEFT]: Constants.DIRECTION_RIGHT,\r\n      [Constants.DIRECTION_UP]: Constants.DIRECTION_DOWN,\r\n      [Constants.DIRECTION_RIGHT]: Constants.DIRECTION_LEFT,\r\n      [Constants.DIRECTION_DOWN]: Constants.DIRECTION_UP\r\n    };\r\n\r\n    return map[dir1] === dir2;\r\n  },\r\n  getRandomIntInRange: (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n  },\r\n  getRandomBoardPosition: () => {\r\n    let boardSize = Constants.GAME_BOARD_SIZE;\r\n\r\n    return [\r\n      Utilities.getRandomIntInRange(0, boardSize),\r\n      Utilities.getRandomIntInRange(0, boardSize),\r\n    ];\r\n  },\r\n  getNewApplePosition: (snakeBody) => {\r\n    while (true) {\r\n      let position = Utilities.getRandomBoardPosition();\r\n      if (!Utilities.doesSnakeBodyContainPosition(snakeBody, position)) {\r\n        return position;\r\n      }\r\n    }\r\n  },\r\n  isAppleAtPosition: (position, applePosition) => {\r\n    return applePosition && applePosition[0] === position[0] && applePosition[1] === position[1];\r\n  },\r\n  generateNewApple: (snakeBody, setApplePosition) => {\r\n    setApplePosition(Utilities.getNewApplePosition(snakeBody));\r\n  }\r\n};\r\n\r\nexport default Utilities;\r\n","import React from 'react';\r\nimport Utilities from '../utilities/Utilities';\r\n\r\nfunction GameBoard({ boardSize, snake, applePosition }) {\r\n\r\n  function getCellClass(row, col) {\r\n    let position = [row, col];\r\n    let classes = 'cell';\r\n\r\n    if (Utilities.doesSnakeBodyContainPosition(snake, position)) {\r\n      classes += ' cell-snake';\r\n    } else if (Utilities.isAppleAtPosition(position, applePosition)) {\r\n      classes += ' cell-apple';\r\n    }\r\n\r\n    return classes;\r\n  }\r\n\r\n  return <table className=\"game-board\">\r\n    <tbody>\r\n      {[...Array(boardSize)].map((e, rowId) => {\r\n        return <tr className=\"row\" key={rowId}>\r\n          {[...Array(boardSize)].map((e, colId) => {\r\n            return <td className={getCellClass(rowId, colId)} key={rowId + '-' + colId}></td>\r\n          })}\r\n        </tr>\r\n      })}\r\n    </tbody>\r\n  </table>\r\n}\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\r\n\r\nfunction PlayGameButton({ isGameActive, startGame }) {\r\n  return isGameActive ? null : (\r\n    <button style={{marginBottom: '2vh'}} onClick={startGame}>\r\n      Start Game! (Press Space)\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PlayGameButton;\r\n","import React from 'react';\r\n\r\nfunction DisplayMessage({ text, color }) {\r\n  return <h3 style={{ color: color }}>{text}</h3>\r\n}\r\n\r\nexport default DisplayMessage;\r\n","import React, { useState, useEffect } from 'react';\nimport GameBoard from './components/GameBoard';\nimport PlayGameButton from './components/PlayGameButton';\nimport DisplayMessage from './components/DisplayMessage';\nimport Constants from './utilities/Constants';\nimport Utilities from './utilities/Utilities';\nimport LinkedList from './utilities/LinkedList';\nimport useInterval from './utilities/UseInterval';\n\nfunction App() {\n  const [isGameActive, setIsGameActive] = useState(false);\n  const [score, setScore] = useState(-1);\n  const [snakeBody, setSnakeBody] = useState(new LinkedList(Constants.SPAWN_POSITION));\n  const [snakeDirection, setSnakeDirection] = useState(Constants.DIRECTION_RIGHT);\n  const [applePosition, setApplePosition] = useState(null);\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    window.addEventListener('keydown', e => {\n      if (e.key === ' ') { //if pressed spacebar\n        restartGame();\n      } else {\n        const newDirection = Utilities.getDirectionFromKey(e.key);\n        if (newDirection) {\n          setSnakeDirection((oldDirection) => {\n            if (!Utilities.areDirectionsOppositeFromEachOther(oldDirection, newDirection)) {\n              return newDirection;\n            } else {\n              return oldDirection;\n            }\n          });\n        }\n      }\n    });\n  }, []);\n\n  useInterval(() => {\n    if (isGameActive) {\n      Utilities.moveSnake(setSnakeBody, snakeDirection, applePosition, setApplePosition, endGame);\n    }\n  }, Constants.REFRESH_RATE);\n\n  useEffect(() => {\n    setScore(oldScore => oldScore + 1);\n  }, [applePosition]);\n\n  const restartGame = () => {\n    setMessage(null);\n    setScore(0);\n    setSnakeBody(new LinkedList(Constants.SPAWN_POSITION));\n    setSnakeDirection(Constants.DIRECTION_RIGHT);\n    setApplePosition(Utilities.getNewApplePosition(snakeBody));\n    setIsGameActive(true);\n  };\n\n  const endGame = () => {\n    setIsGameActive(false);\n    setMessage('You lost! Final score: ' + score);\n  };\n\n  return <div style={{textAlign: 'center', color: 'white'}}>\n    {score >= 0 ? (<h1>Score: {score}</h1>) : null}\n\n    <DisplayMessage text={message} color='red' />\n    {isGameActive ? null : <PlayGameButton isGameActive={isGameActive} startGame={restartGame} />}\n    <GameBoard boardSize={Constants.GAME_BOARD_SIZE} snake={snakeBody} applePosition={applePosition} />\n  </div>\n}\n\nexport default App;\n","import { useRef, useEffect } from 'react';\r\n\r\nexport default function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}